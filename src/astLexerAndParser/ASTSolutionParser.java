package astLexerAndParser;

//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Feb 13 15:18:07 EST 2002
//----------------------------------------------------

import generalHelpers.ListNode;
import java_cup.runtime.*;
import symbolHandling.AbstractSymbol;
import treeNodesSolution.*;

/**
 * CUP v0.10j generated parser.
 * 
 * @version Wed Feb 13 15:18:07 EST 2002
 */
public class ASTSolutionParser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public ASTSolutionParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public ASTSolutionParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\062\000\002\003\005\000\002\002\004\000\002\003"
			+ "\002\000\002\004\003\000\002\004\004\000\002\005\012"
			+ "\000\002\007\002\000\002\007\003\000\002\006\003\000"
			+ "\002\006\004\000\002\010\010\000\002\010\007\000\002"
			+ "\011\002\000\002\011\003\000\002\012\003\000\002\012"
			+ "\004\000\002\013\006\000\002\015\005\000\002\015\005"
			+ "\000\002\014\006\000\002\014\010\000\002\014\007\000"
			+ "\002\014\007\000\002\014\006\000\002\014\005\000\002"
			+ "\014\010\000\002\014\006\000\002\014\005\000\002\014"
			+ "\005\000\002\014\006\000\002\014\006\000\002\014\006"
			+ "\000\002\014\006\000\002\014\005\000\002\014\006\000"
			+ "\002\014\006\000\002\014\006\000\002\014\005\000\002"
			+ "\014\005\000\002\014\005\000\002\014\005\000\002\014"
			+ "\005\000\002\014\004\000\002\016\004\000\002\016\005"
			+ "\000\002\017\003\000\002\017\004\000\002\020\003\000"
			+ "\002\020\004\000\002\021\007" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\171\000\006\002\uffff\051\005\001\002\000\004\002"
			+ "\173\001\002\000\004\004\006\001\002\000\004\051\011"
			+ "\001\002\000\006\002\001\051\011\001\002\000\006\002"
			+ "\ufffe\051\ufffe\001\002\000\004\005\012\001\002\000\004"
			+ "\050\013\001\002\000\004\050\014\001\002\000\004\046"
			+ "\015\001\002\000\004\015\016\001\002\000\006\016\ufffb"
			+ "\051\022\001\002\000\006\016\ufff9\051\ufff9\001\002\000"
			+ "\004\016\171\001\002\000\006\016\ufffa\051\022\001\002"
			+ "\000\006\006\024\007\023\001\002\000\004\050\165\001"
			+ "\002\000\004\050\025\001\002\000\006\050\ufff5\051\031"
			+ "\001\002\000\006\050\ufff4\051\031\001\002\000\006\050"
			+ "\ufff3\051\ufff3\001\002\000\004\050\035\001\002\000\004"
			+ "\010\032\001\002\000\004\050\033\001\002\000\004\050"
			+ "\034\001\002\000\006\050\ufff1\051\ufff1\001\002\000\004"
			+ "\051\036\001\002\000\062\012\063\013\060\014\057\020"
			+ "\066\021\051\022\054\023\073\024\061\025\046\026\052"
			+ "\027\072\030\056\031\045\032\044\033\064\034\067\035"
			+ "\050\036\047\037\062\040\070\041\065\042\071\043\055"
			+ "\044\053\001\002\000\006\016\ufff7\051\ufff7\001\002\000"
			+ "\004\017\041\001\002\000\006\045\043\050\042\001\002"
			+ "\000\012\016\ufff0\017\ufff0\050\ufff0\051\ufff0\001\002\000"
			+ "\012\016\uffef\017\uffef\050\uffef\051\uffef\001\002\000\004"
			+ "\051\036\001\002\000\004\051\036\001\002\000\004\051"
			+ "\036\001\002\000\004\047\156\001\002\000\004\051\036"
			+ "\001\002\000\004\051\036\001\002\000\004\051\036\001"
			+ "\002\000\004\050\150\001\002\000\004\051\036\001\002"
			+ "\000\004\017\uffd7\001\002\000\004\051\036\001\002\000"
			+ "\004\051\036\001\002\000\004\051\036\001\002\000\004"
			+ "\050\116\001\002\000\004\046\115\001\002\000\004\050"
			+ "\113\001\002\000\004\051\036\001\002\000\004\050\110"
			+ "\001\002\000\004\051\036\001\002\000\004\051\036\001"
			+ "\002\000\004\047\102\001\002\000\004\051\036\001\002"
			+ "\000\004\051\036\001\002\000\004\051\036\001\002\000"
			+ "\006\017\uffe9\051\036\001\002\000\010\016\uffd4\017\uffd4"
			+ "\051\uffd4\001\002\000\010\016\uffd3\017\uffd3\051\uffd3\001"
			+ "\002\000\004\051\036\001\002\000\004\017\uffe2\001\002"
			+ "\000\004\017\uffe5\001\002\000\004\017\uffd9\001\002\000"
			+ "\004\051\036\001\002\000\004\017\uffdd\001\002\000\004"
			+ "\051\036\001\002\000\004\051\036\001\002\000\004\017"
			+ "\uffeb\001\002\000\004\017\uffe6\001\002\000\004\051\036"
			+ "\001\002\000\004\017\uffde\001\002\000\004\051\036\001"
			+ "\002\000\004\017\uffee\001\002\000\004\017\uffda\001\002"
			+ "\000\004\050\117\001\002\000\004\051\036\001\002\000"
			+ "\004\051\036\001\002\000\004\017\uffe8\001\002\000\004"
			+ "\050\123\001\002\000\004\050\124\001\002\000\004\015"
			+ "\126\001\002\000\004\017\uffed\001\002\000\006\016\127"
			+ "\051\036\001\002\000\004\017\uffd6\001\002\000\006\016"
			+ "\131\051\036\001\002\000\004\017\uffd5\001\002\000\004"
			+ "\050\133\001\002\000\004\015\126\001\002\000\004\017"
			+ "\uffec\001\002\000\004\051\036\001\002\000\004\017\uffe1"
			+ "\001\002\000\004\051\141\001\002\000\006\017\uffe7\051"
			+ "\141\001\002\000\004\011\143\001\002\000\006\017\uffd2"
			+ "\051\uffd2\001\002\000\004\050\144\001\002\000\004\050"
			+ "\145\001\002\000\004\051\036\001\002\000\006\017\uffd0"
			+ "\051\uffd0\001\002\000\006\017\uffd1\051\uffd1\001\002\000"
			+ "\004\017\uffd8\001\002\000\004\051\036\001\002\000\004"
			+ "\017\uffe3\001\002\000\004\051\036\001\002\000\004\017"
			+ "\uffea\001\002\000\004\017\uffdc\001\002\000\004\017\uffdb"
			+ "\001\002\000\004\051\036\001\002\000\004\017\uffe4\001"
			+ "\002\000\004\017\uffe0\001\002\000\004\051\036\001\002"
			+ "\000\004\017\uffdf\001\002\000\006\050\ufff2\051\ufff2\001"
			+ "\002\000\004\050\166\001\002\000\004\051\036\001\002"
			+ "\000\006\016\ufff6\051\ufff6\001\002\000\006\016\ufff8\051"
			+ "\ufff8\001\002\000\006\002\ufffc\051\ufffc\001\002\000\006"
			+ "\002\ufffd\051\ufffd\001\002\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\171\000\004\003\003\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\004\006\005\007\001\001\000\004"
			+ "\005\171\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\010\006\020\007\017\010\016\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\010\167\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\010\011\027\012\025\013\026\001\001\000\004\013\163"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\014\037\015\036\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\014\037\015\161\001"
			+ "\001\000\006\014\037\015\160\001\001\000\006\014\037"
			+ "\015\156\001\001\000\002\001\001\000\006\014\037\015"
			+ "\154\001\001\000\006\014\037\015\152\001\001\000\006"
			+ "\014\037\015\150\001\001\000\002\001\001\000\006\014"
			+ "\037\015\136\001\001\000\002\001\001\000\006\014\037"
			+ "\015\134\001\001\000\006\014\037\015\131\001\001\000"
			+ "\006\014\037\015\121\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\014\037\015\110\001"
			+ "\001\000\002\001\001\000\006\014\037\015\104\001\001"
			+ "\000\006\014\037\015\102\001\001\000\002\001\001\000"
			+ "\006\014\037\015\100\001\001\000\006\014\037\015\076"
			+ "\001\001\000\010\014\037\015\074\017\073\001\001\000"
			+ "\006\014\037\015\075\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\014\037\015\077\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\006\014\037"
			+ "\015\103\001\001\000\002\001\001\000\006\014\037\015"
			+ "\105\001\001\000\006\014\037\015\106\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\014\037\015\111\001"
			+ "\001\000\002\001\001\000\006\014\037\015\113\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\014\037\015\117\001\001\000\006\014\037\015\120"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\016\124\001\001\000\002\001\001\000\010"
			+ "\014\037\015\074\017\127\001\001\000\002\001\001\000"
			+ "\006\014\037\015\075\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\016\133\001\001\000\002\001\001\000"
			+ "\006\014\037\015\135\001\001\000\002\001\001\000\006"
			+ "\020\137\021\141\001\001\000\004\021\146\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\014\037\015\145\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\006\014\037"
			+ "\015\151\001\001\000\002\001\001\000\006\014\037\015"
			+ "\153\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\014\037\015\157\001\001\000\002\001"
			+ "\001\000\002\001\001\000\006\014\037\015\162\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\014\037\015\166\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$ASTSolutionParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$ASTSolutionParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$ASTSolutionParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public void syntax_error(Symbol cur_token) {
		System.err.println("??? unexpected error in ast parsing: "
				+ ((ASTLexer) getScanner()).line());
		System.exit(1);
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$ASTSolutionParser$actions {

	Integer curr_lineno = new Integer(0);

	private final ASTSolutionParser parser;

	/** Constructor */
	CUP$ASTSolutionParser$actions(ASTSolutionParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$ASTSolutionParser$do_action(
			int CUP$ASTSolutionParser$act_num,
			java_cup.runtime.lr_parser CUP$ASTSolutionParser$parser,
			java.util.Stack CUP$ASTSolutionParser$stack, int CUP$ASTSolutionParser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$ASTSolutionParser$result;

		/* select the action based on the action number */
		switch (CUP$ASTSolutionParser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // simple_case ::= LINENO Branch ID ID expr
		{
			Branch RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 4)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Branch(l.intValue(), n, t, e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					15/* simple_case */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // case_list ::= case_list simple_case
		{
			ListNode<Branch> RESULT = null;
			ListNode<Branch> cl = (ListNode<Branch>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			Branch c = (Branch) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = cl.appendElement(c);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					14/* case_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // case_list ::= simple_case
		{
			ListNode<Branch> RESULT = null;
			Branch c = (Branch) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = (new ListNode<Branch>(curr_lineno.intValue())).appendElement(c);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					14/* case_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // expr_list ::= expr_list expr
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> el = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = el.appendElement(e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					13/* expr_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // expr_list ::= expr
		{
			ListNode<AbstractExpression> RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = (new ListNode<AbstractExpression>(curr_lineno.intValue())).appendElement(e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					13/* expr_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // actuals ::= LPAREN expr_list RPAREN
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> el = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			RESULT = el;
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					12/* actuals */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // actuals ::= LPAREN RPAREN
		{
			ListNode<AbstractExpression> RESULT = null;
			RESULT = new ListNode<AbstractExpression>(curr_lineno.intValue());
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					12/* actuals */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // expr_aux ::= LINENO NoExpression
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			curr_lineno = l;
			RESULT = new NoExpression(l.intValue());
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // expr_aux ::= LINENO OBJECT ID
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Object_(l.intValue(), n);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // expr_aux ::= LINENO BOOL INT_CONST
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol b = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			if (b.getString().charAt(0) == '1')
				RESULT = new BoolConstant(l.intValue(), Boolean.TRUE);
			else
				RESULT = new BoolConstant(l.intValue(), Boolean.FALSE);

			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // expr_aux ::= LINENO STR STR_CONST
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol s = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new StringConstant(l.intValue(), s);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // expr_aux ::= LINENO INT INT_CONST
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol i = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new IntegerConstant(l.intValue(), i);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // expr_aux ::= LINENO COMP expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Complement(l.intValue(), e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // expr_aux ::= LINENO LEQ expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Leq(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // expr_aux ::= LINENO EQ expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Eq(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // expr_aux ::= LINENO LT expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Lt(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // expr_aux ::= LINENO NEG expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Negate(l.intValue(), e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // expr_aux ::= LINENO DIVIDE expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Divide(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // expr_aux ::= LINENO MUL expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Mul(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // expr_aux ::= LINENO SUB expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Sub(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // expr_aux ::= LINENO PLUS expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Plus(l.intValue(), e1, e2);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // expr_aux ::= LINENO ISVOID expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new IsVoid(l.intValue(), e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // expr_aux ::= LINENO NEW ID
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new New_(l.intValue(), t);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // expr_aux ::= LINENO TYPCASE expr case_list
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			ListNode<Branch> cl = (ListNode<Branch>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new CaseExpression(l.intValue(), e, cl);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // expr_aux ::= LINENO LET ID ID expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 5)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractExpression i = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression b = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Let(l.intValue(), n, t, i, b);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // expr_aux ::= LINENO BLOCK expr_list
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			ListNode<AbstractExpression> el = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Block(l.intValue(), el);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // expr_aux ::= LINENO LOOP expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractExpression p = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression b = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Loop(l.intValue(), p, b);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // expr_aux ::= LINENO COND expr expr expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 4)).value;
			AbstractExpression p = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractExpression t = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Conditional(l.intValue(), p, t, e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // expr_aux ::= LINENO DISPATCH expr ID actuals
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 4)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			ListNode<AbstractExpression> a = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Dispatch(l.intValue(), e, n, a);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // expr_aux ::= LINENO STATIC_DISPATCH expr ID ID actuals
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 5)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			ListNode<AbstractExpression> a = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new StaticDispatch(l.intValue(), e, t, n, a);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // expr_aux ::= LINENO ASSIGN ID expr
		{
			AbstractExpression RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Assign(l.intValue(), n, e);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					10/* expr_aux */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // expr ::= expr_aux COLON NO_TYPE
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			RESULT = e;
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(11/* expr */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // expr ::= expr_aux COLON ID
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = e;
			e.setType(t);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(11/* expr */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // formal ::= LINENO FORMAL ID ID
		{
			Formal RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Formal(l.intValue(), n, t);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(9/* formal */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // formal_list ::= formal_list formal
		{
			ListNode<Formal> RESULT = null;
			ListNode<Formal> fl = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			Formal f = (Formal) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = fl.appendElement(f);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					8/* formal_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // formal_list ::= formal
		{
			ListNode<Formal> RESULT = null;
			Formal f = (Formal) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = (new ListNode<Formal>(curr_lineno.intValue())).appendElement(f);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					8/* formal_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // ListNode<Formal> ::= formal_list
		{
			ListNode<Formal> RESULT = null;
			ListNode<Formal> fl = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = fl;
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(7/* ListNode<Formal> */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // ListNode<Formal> ::=
		{
			ListNode<Formal> RESULT = null;
			RESULT = new ListNode<Formal>(curr_lineno.intValue());
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(7/* ListNode<Formal> */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // feature ::= LINENO ATTR ID ID expr
		{
			AbstractFeature RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 4)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression i = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Attribute(l.intValue(), n, t, i);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(6/* feature */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // feature ::= LINENO METHOD ID ListNode<Formal> ID expr
		{
			AbstractFeature RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 5)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			ListNode<Formal> f = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractExpression b = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Method(l.intValue(), n, f, t, b);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(6/* feature */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // feature_list ::= feature_list feature
		{
			ListNode<AbstractFeature> RESULT = null;
			ListNode<AbstractFeature> fl = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			AbstractFeature f = (AbstractFeature) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = fl.appendElement(f);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // feature_list ::= feature
		{
			ListNode<AbstractFeature> RESULT = null;
			AbstractFeature f = (AbstractFeature) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = (new ListNode<AbstractFeature>(curr_lineno.intValue())).appendElement(f);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // optional_feature_list ::= feature_list
		{
			ListNode<AbstractFeature> RESULT = null;
			ListNode<AbstractFeature> fl = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = fl;
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					5/* optional_feature_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // optional_feature_list ::=
		{
			ListNode<AbstractFeature> RESULT = null;
			RESULT = new ListNode<AbstractFeature>(curr_lineno.intValue());
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					5/* optional_feature_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // class ::= LINENO CLASS ID ID STR_CONST LPAREN
			// optional_feature_list RPAREN
		{
			Class_ RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 7)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 5)).value;
			AbstractSymbol p = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 4)).value;
			AbstractSymbol file = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 3)).value;
			ListNode<AbstractFeature> f = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			curr_lineno = l;
			RESULT = new Class_(l.intValue(), n, p, f, file);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(3/* class */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // class_list ::= class_list class
		{
			ListNode<Class_> RESULT = null;
			ListNode<Class_> cl = (ListNode<Class_>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			Class_ c = (Class_) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = cl.appendElement(c);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // class_list ::= class
		{
			ListNode<Class_> RESULT = null;
			Class_ c = (Class_) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			RESULT = (new ListNode<Class_>(curr_lineno.intValue())).appendElement(c);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // program ::=
		{
			Program RESULT = null;
			RESULT = null;
			System.exit(1);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(1/* program */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= program EOF
		{
			Object RESULT = null;
			Program start_val = (Program) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 1)).value;
			RESULT = start_val;
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(0/* $START */,
					RESULT);
		}
			/* ACCEPT */
			CUP$ASTSolutionParser$parser.done_parsing();
			return CUP$ASTSolutionParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // program ::= LINENO PROGRAM class_list
		{
			Program RESULT = null;
			Integer l = (Integer) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 2)).value;
			ListNode<Class_> cl = (ListNode<Class_>) ((java_cup.runtime.Symbol) CUP$ASTSolutionParser$stack
					.elementAt(CUP$ASTSolutionParser$top - 0)).value;
			curr_lineno = l;
			RESULT = new Program(l.intValue(), cl);
			CUP$ASTSolutionParser$result = new java_cup.runtime.Symbol(1/* program */,
					RESULT);
		}
			return CUP$ASTSolutionParser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
