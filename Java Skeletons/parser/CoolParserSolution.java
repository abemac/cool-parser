package parser;

//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Feb 13 14:56:05 EST 2002
//----------------------------------------------------

import generalHelpers.ListNode;
import generalHelpers.Utilities;
import symbolHandling.AbstractSymbol;
import symbolHandling.AbstractTable;
import treeNodesSolution.*;
import java_cup.runtime.*;
import astLexerAndParser.CoolTokenLexer;

/**
 * CUP v0.10j generated parser.
 * 
 * @version Wed Feb 13 14:56:05 EST 2002
 */
 public class CoolParserSolution extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public CoolParserSolution() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public CoolParserSolution(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\101\000\002\003\003\000\002\002\004\000\002\003"
			+ "\003\000\002\004\003\000\002\004\004\000\002\004\004"
			+ "\000\002\004\004\000\002\005\010\000\002\005\012\000"
			+ "\002\007\002\000\002\007\003\000\002\006\004\000\002"
			+ "\006\004\000\002\006\005\000\002\006\005\000\002\010"
			+ "\011\000\002\010\006\000\002\015\002\000\002\015\004"
			+ "\000\002\011\004\000\002\011\005\000\002\011\005\000"
			+ "\002\012\003\000\002\012\005\000\002\013\005\000\002"
			+ "\016\010\000\002\016\005\000\002\016\010\000\002\016"
			+ "\005\000\002\014\005\000\002\014\010\000\002\014\006"
			+ "\000\002\014\011\000\002\014\007\000\002\014\005\000"
			+ "\002\014\004\000\002\014\007\000\002\014\004\000\002"
			+ "\014\004\000\002\014\005\000\002\014\005\000\002\014"
			+ "\005\000\002\014\005\000\002\014\004\000\002\014\005"
			+ "\000\002\014\005\000\002\014\005\000\002\014\004\000"
			+ "\002\014\005\000\002\014\003\000\002\014\003\000\002"
			+ "\014\003\000\002\014\003\000\002\014\004\000\002\017"
			+ "\004\000\002\017\004\000\002\017\005\000\002\017\005"
			+ "\000\002\020\004\000\002\020\005\000\002\021\003\000"
			+ "\002\021\005\000\002\022\003\000\002\022\004\000\002"
			+ "\023\010" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\230\000\006\003\006\004\010\001\002\000\010\002"
			+ "\001\003\231\004\010\001\002\000\004\002\230\001\002"
			+ "\000\006\002\uffff\043\227\001\002\000\010\002\ufffe\003"
			+ "\ufffe\004\ufffe\001\002\000\004\055\011\001\002\000\006"
			+ "\011\013\050\012\001\002\000\010\003\016\051\ufff8\056"
			+ "\021\001\002\000\004\055\014\001\002\000\004\050\015"
			+ "\001\002\000\010\003\016\051\ufff8\056\021\001\002\000"
			+ "\004\043\223\001\002\000\004\043\222\001\002\000\004"
			+ "\051\220\001\002\000\006\044\030\045\031\001\002\000"
			+ "\010\003\023\051\ufff7\056\021\001\002\000\004\043\026"
			+ "\001\002\000\004\043\025\001\002\000\010\003\ufff4\051"
			+ "\ufff4\056\ufff4\001\002\000\010\003\ufff3\051\ufff3\056\ufff3"
			+ "\001\002\000\004\044\213\001\002\000\004\055\045\001"
			+ "\002\000\010\003\034\046\033\056\036\001\002\000\006"
			+ "\042\042\046\043\001\002\000\004\044\uffee\001\002\000"
			+ "\004\046\041\001\002\000\006\042\uffeb\046\uffeb\001\002"
			+ "\000\004\044\037\001\002\000\004\055\040\001\002\000"
			+ "\006\042\uffe9\046\uffe9\001\002\000\004\044\uffec\001\002"
			+ "\000\004\056\036\001\002\000\004\044\uffed\001\002\000"
			+ "\006\042\uffea\046\uffea\001\002\000\006\026\047\043\ufff0"
			+ "\001\002\000\004\043\ufff1\001\002\000\036\007\056\012"
			+ "\065\017\051\020\061\024\052\025\057\027\062\041\064"
			+ "\045\066\050\050\052\054\053\053\054\055\056\060\001"
			+ "\002\000\040\003\201\007\056\012\065\017\051\020\061"
			+ "\024\052\025\057\027\062\041\064\045\066\050\050\052"
			+ "\054\053\053\054\055\056\060\001\002\000\036\007\056"
			+ "\012\065\017\051\020\061\024\052\025\057\027\062\041"
			+ "\064\045\066\050\050\052\054\053\053\054\055\056\060"
			+ "\001\002\000\004\055\174\001\002\000\052\005\uffd0\006"
			+ "\uffd0\010\uffd0\014\uffd0\015\uffd0\016\uffd0\022\uffd0\030\uffd0"
			+ "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040"
			+ "\uffd0\042\uffd0\043\uffd0\046\uffd0\047\uffd0\051\uffd0\001\002"
			+ "\000\052\005\uffcf\006\uffcf\010\uffcf\014\uffcf\015\uffcf\016"
			+ "\uffcf\022\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf"
			+ "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\046\uffcf\047"
			+ "\uffcf\051\uffcf\001\002\000\052\005\uffce\006\uffce\010\uffce"
			+ "\014\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032\uffce\033"
			+ "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce"
			+ "\043\uffce\046\uffce\047\uffce\051\uffce\001\002\000\036\007"
			+ "\056\012\065\017\051\020\061\024\052\025\057\027\062"
			+ "\041\064\045\066\050\050\052\054\053\053\054\055\056"
			+ "\060\001\002\000\036\007\056\012\065\017\051\020\061"
			+ "\024\052\025\057\027\062\041\064\045\066\050\050\052"
			+ "\054\053\053\054\055\056\060\001\002\000\056\005\uffcd"
			+ "\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd\026"
			+ "\163\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd"
			+ "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\045\107\046\uffcd\047"
			+ "\uffcd\051\uffcd\001\002\000\036\007\056\012\065\017\051"
			+ "\020\061\024\052\025\057\027\062\041\064\045\066\050"
			+ "\050\052\054\053\053\054\055\056\060\001\002\000\036"
			+ "\007\056\012\065\017\051\020\061\024\052\025\057\027"
			+ "\062\041\064\045\066\050\050\052\054\053\053\054\055"
			+ "\056\060\001\002\000\032\010\uffef\030\074\032\072\033"
			+ "\076\034\070\035\071\036\073\037\101\040\075\042\uffef"
			+ "\043\uffef\047\100\001\002\000\036\007\056\012\065\017"
			+ "\051\020\061\024\052\025\057\027\062\041\064\045\066"
			+ "\050\050\052\054\053\053\054\055\056\060\001\002\000"
			+ "\006\003\126\056\130\001\002\000\036\007\056\012\065"
			+ "\017\051\020\061\024\052\025\057\027\062\041\064\045"
			+ "\066\050\050\052\054\053\053\054\055\056\060\001\002"
			+ "\000\026\030\074\032\072\033\076\034\070\035\071\036"
			+ "\073\037\101\040\075\046\077\047\100\001\002\000\036"
			+ "\007\056\012\065\017\051\020\061\024\052\025\057\027"
			+ "\062\041\064\045\066\050\050\052\054\053\053\054\055"
			+ "\056\060\001\002\000\036\007\056\012\065\017\051\020"
			+ "\061\024\052\025\057\027\062\041\064\045\066\050\050"
			+ "\052\054\053\053\054\055\056\060\001\002\000\036\007"
			+ "\056\012\065\017\051\020\061\024\052\025\057\027\062"
			+ "\041\064\045\066\050\050\052\054\053\053\054\055\056"
			+ "\060\001\002\000\036\007\056\012\065\017\051\020\061"
			+ "\024\052\025\057\027\062\041\064\045\066\050\050\052"
			+ "\054\053\053\054\055\056\060\001\002\000\036\007\056"
			+ "\012\065\017\051\020\061\024\052\025\057\027\062\041"
			+ "\064\045\066\050\050\052\054\053\053\054\055\056\060"
			+ "\001\002\000\004\056\117\001\002\000\036\007\056\012"
			+ "\065\017\051\020\061\024\052\025\057\027\062\041\064"
			+ "\045\066\050\050\052\054\053\053\054\055\056\060\001"
			+ "\002\000\052\005\uffd1\006\uffd1\010\uffd1\014\uffd1\015\uffd1"
			+ "\016\uffd1\022\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035"
			+ "\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\046\uffd1"
			+ "\047\uffd1\051\uffd1\001\002\000\004\055\103\001\002\000"
			+ "\036\007\056\012\065\017\051\020\061\024\052\025\057"
			+ "\027\062\041\064\045\066\050\050\052\054\053\053\054"
			+ "\055\056\060\001\002\000\044\005\uffd5\006\uffd5\010\uffd5"
			+ "\014\uffd5\015\uffd5\016\uffd5\022\uffd5\032\072\033\076\034"
			+ "\070\035\071\040\075\042\uffd5\043\uffd5\046\uffd5\047\100"
			+ "\051\uffd5\001\002\000\004\040\104\001\002\000\004\056"
			+ "\105\001\002\000\004\045\107\001\002\000\052\005\uffe3"
			+ "\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\030"
			+ "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3"
			+ "\040\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3\001"
			+ "\002\000\040\007\056\012\065\017\051\020\061\024\052"
			+ "\025\057\027\062\041\064\045\066\046\110\050\050\052"
			+ "\054\053\053\054\055\056\060\001\002\000\052\005\uffc7"
			+ "\006\uffc7\010\uffc7\014\uffc7\015\uffc7\016\uffc7\022\uffc7\030"
			+ "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7"
			+ "\040\uffc7\042\uffc7\043\uffc7\046\uffc7\047\uffc7\051\uffc7\001"
			+ "\002\000\006\042\113\046\114\001\002\000\030\030\074"
			+ "\032\072\033\076\034\070\035\071\036\073\037\101\040"
			+ "\075\042\uffc5\046\uffc5\047\100\001\002\000\036\007\056"
			+ "\012\065\017\051\020\061\024\052\025\057\027\062\041"
			+ "\064\045\066\050\050\052\054\053\053\054\055\056\060"
			+ "\001\002\000\052\005\uffc6\006\uffc6\010\uffc6\014\uffc6\015"
			+ "\uffc6\016\uffc6\022\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6"
			+ "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\046"
			+ "\uffc6\047\uffc6\051\uffc6\001\002\000\030\030\074\032\072"
			+ "\033\076\034\070\035\071\036\073\037\101\040\075\042"
			+ "\uffc4\046\uffc4\047\100\001\002\000\052\005\uffd7\006\uffd7"
			+ "\010\uffd7\014\uffd7\015\uffd7\016\uffd7\022\uffd7\030\uffd7\032"
			+ "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\075"
			+ "\042\uffd7\043\uffd7\046\uffd7\047\100\051\uffd7\001\002\000"
			+ "\004\045\107\001\002\000\052\005\uffe2\006\uffe2\010\uffe2"
			+ "\014\uffe2\015\uffe2\016\uffe2\022\uffe2\030\uffe2\032\uffe2\033"
			+ "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2"
			+ "\043\uffe2\046\uffe2\047\uffe2\051\uffe2\001\002\000\044\005"
			+ "\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\022\uffd3"
			+ "\032\072\033\076\034\070\035\071\040\075\042\uffd3\043"
			+ "\uffd3\046\uffd3\047\100\051\uffd3\001\002\000\044\005\uffd4"
			+ "\006\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4\022\uffd4\032"
			+ "\072\033\076\034\070\035\071\040\075\042\uffd4\043\uffd4"
			+ "\046\uffd4\047\100\051\uffd4\001\002\000\052\005\uffda\006"
			+ "\uffda\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda\030\uffda"
			+ "\032\uffda\033\076\034\uffda\035\071\036\uffda\037\uffda\040"
			+ "\075\042\uffda\043\uffda\046\uffda\047\100\051\uffda\001\002"
			+ "\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8\016"
			+ "\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8"
			+ "\036\uffd8\037\uffd8\040\075\042\uffd8\043\uffd8\046\uffd8\047"
			+ "\100\051\uffd8\001\002\000\052\005\uffd9\006\uffd9\010\uffd9"
			+ "\014\uffd9\015\uffd9\016\uffd9\022\uffd9\030\uffd9\032\uffd9\033"
			+ "\076\034\uffd9\035\071\036\uffd9\037\uffd9\040\075\042\uffd9"
			+ "\043\uffd9\046\uffd9\047\100\051\uffd9\001\002\000\006\010"
			+ "\141\042\140\001\002\000\052\005\uffde\006\uffde\010\uffde"
			+ "\014\uffde\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde\033"
			+ "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde"
			+ "\043\uffde\046\uffde\047\uffde\051\uffde\001\002\000\004\044"
			+ "\131\001\002\000\004\055\132\001\002\000\010\010\ufff0"
			+ "\026\047\042\ufff0\001\002\000\006\010\135\042\134\001"
			+ "\002\000\006\003\126\056\130\001\002\000\036\007\056"
			+ "\012\065\017\051\020\061\024\052\025\057\027\062\041"
			+ "\064\045\066\050\050\052\054\053\053\054\055\056\060"
			+ "\001\002\000\052\005\uffe8\006\uffe8\010\uffe8\014\uffe8\015"
			+ "\uffe8\016\uffe8\022\uffe8\030\074\032\072\033\076\034\070"
			+ "\035\071\036\073\037\101\040\075\042\uffe8\043\uffe8\046"
			+ "\uffe8\047\100\051\uffe8\001\002\000\052\005\uffe6\006\uffe6"
			+ "\010\uffe6\014\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6\032"
			+ "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6"
			+ "\042\uffe6\043\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002\000"
			+ "\006\003\126\056\130\001\002\000\036\007\056\012\065"
			+ "\017\051\020\061\024\052\025\057\027\062\041\064\045"
			+ "\066\050\050\052\054\053\053\054\055\056\060\001\002"
			+ "\000\052\005\uffe7\006\uffe7\010\uffe7\014\uffe7\015\uffe7\016"
			+ "\uffe7\022\uffe7\030\074\032\072\033\076\034\070\035\071"
			+ "\036\073\037\101\040\075\042\uffe7\043\uffe7\046\uffe7\047"
			+ "\100\051\uffe7\001\002\000\052\005\uffe5\006\uffe5\010\uffe5"
			+ "\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033"
			+ "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5"
			+ "\043\uffe5\046\uffe5\047\uffe5\051\uffe5\001\002\000\052\005"
			+ "\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6"
			+ "\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037"
			+ "\uffd6\040\075\042\uffd6\043\uffd6\046\uffd6\047\100\051\uffd6"
			+ "\001\002\000\052\005\uffd2\006\uffd2\010\uffd2\014\uffd2\015"
			+ "\uffd2\016\uffd2\022\uffd2\030\074\032\072\033\076\034\070"
			+ "\035\071\036\073\037\101\040\075\042\uffd2\043\uffd2\046"
			+ "\uffd2\047\100\051\uffd2\001\002\000\026\022\147\030\074"
			+ "\032\072\033\076\034\070\035\071\036\073\037\101\040"
			+ "\075\047\100\001\002\000\004\056\150\001\002\000\004"
			+ "\044\155\001\002\000\006\021\153\056\150\001\002\000"
			+ "\006\021\uffc3\056\uffc3\001\002\000\052\005\uffdd\006\uffdd"
			+ "\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\030\uffdd\032"
			+ "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd"
			+ "\042\uffdd\043\uffdd\046\uffdd\047\uffdd\051\uffdd\001\002\000"
			+ "\006\021\uffc2\056\uffc2\001\002\000\004\055\156\001\002"
			+ "\000\004\023\157\001\002\000\036\007\056\012\065\017"
			+ "\051\020\061\024\052\025\057\027\062\041\064\045\066"
			+ "\050\050\052\054\053\053\054\055\056\060\001\002\000"
			+ "\026\030\074\032\072\033\076\034\070\035\071\036\073"
			+ "\037\101\040\075\043\161\047\100\001\002\000\006\021"
			+ "\uffc1\056\uffc1\001\002\000\052\005\uffcc\006\uffcc\010\uffcc"
			+ "\014\uffcc\015\uffcc\016\uffcc\022\uffcc\030\uffcc\032\uffcc\033"
			+ "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc"
			+ "\043\uffcc\046\uffcc\047\uffcc\051\uffcc\001\002\000\036\007"
			+ "\056\012\065\017\051\020\061\024\052\025\057\027\062"
			+ "\041\064\045\066\050\050\052\054\053\053\054\055\056"
			+ "\060\001\002\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4"
			+ "\015\uffe4\016\uffe4\022\uffe4\030\074\032\072\033\076\034"
			+ "\070\035\071\036\073\037\101\040\075\042\uffe4\043\uffe4"
			+ "\046\uffe4\047\100\051\uffe4\001\002\000\052\005\uffdb\006"
			+ "\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb\022\uffdb\030\uffdb"
			+ "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040"
			+ "\075\042\uffdb\043\uffdb\046\uffdb\047\100\051\uffdb\001\002"
			+ "\000\026\016\167\030\074\032\072\033\076\034\070\035"
			+ "\071\036\073\037\101\040\075\047\100\001\002\000\036"
			+ "\007\056\012\065\017\051\020\061\024\052\025\057\027"
			+ "\062\041\064\045\066\050\050\052\054\053\053\054\055"
			+ "\056\060\001\002\000\026\005\171\030\074\032\072\033"
			+ "\076\034\070\035\071\036\073\037\101\040\075\047\100"
			+ "\001\002\000\036\007\056\012\065\017\051\020\061\024"
			+ "\052\025\057\027\062\041\064\045\066\050\050\052\054"
			+ "\053\053\054\055\056\060\001\002\000\026\006\173\030"
			+ "\074\032\072\033\076\034\070\035\071\036\073\037\101"
			+ "\040\075\047\100\001\002\000\052\005\uffe1\006\uffe1\010"
			+ "\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1\030\uffe1\032\uffe1"
			+ "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042"
			+ "\uffe1\043\uffe1\046\uffe1\047\uffe1\051\uffe1\001\002\000\052"
			+ "\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022"
			+ "\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc"
			+ "\037\uffdc\040\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051"
			+ "\uffdc\001\002\000\026\014\176\030\074\032\072\033\076"
			+ "\034\070\035\071\036\073\037\101\040\075\047\100\001"
			+ "\002\000\036\007\056\012\065\017\051\020\061\024\052"
			+ "\025\057\027\062\041\064\045\066\050\050\052\054\053"
			+ "\053\054\055\056\060\001\002\000\026\015\200\030\074"
			+ "\032\072\033\076\034\070\035\071\036\073\037\101\040"
			+ "\075\047\100\001\002\000\052\005\uffe0\006\uffe0\010\uffe0"
			+ "\014\uffe0\015\uffe0\016\uffe0\022\uffe0\030\uffe0\032\uffe0\033"
			+ "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0"
			+ "\043\uffe0\046\uffe0\047\uffe0\051\uffe0\001\002\000\004\043"
			+ "\212\001\002\000\026\030\074\032\072\033\076\034\070"
			+ "\035\071\036\073\037\101\040\075\043\211\047\100\001"
			+ "\002\000\042\003\204\007\056\012\065\017\051\020\061"
			+ "\024\052\025\057\027\062\041\064\045\066\050\050\051"
			+ "\206\052\054\053\053\054\055\056\060\001\002\000\004"
			+ "\043\210\001\002\000\026\030\074\032\072\033\076\034"
			+ "\070\035\071\036\073\037\101\040\075\043\207\047\100"
			+ "\001\002\000\052\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015"
			+ "\uffdf\016\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf"
			+ "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\046"
			+ "\uffdf\047\uffdf\051\uffdf\001\002\000\042\003\uffc9\007\uffc9"
			+ "\012\uffc9\017\uffc9\020\uffc9\024\uffc9\025\uffc9\027\uffc9\041"
			+ "\uffc9\045\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9"
			+ "\056\uffc9\001\002\000\042\003\uffc8\007\uffc8\012\uffc8\017"
			+ "\uffc8\020\uffc8\024\uffc8\025\uffc8\027\uffc8\041\uffc8\045\uffc8"
			+ "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8\001"
			+ "\002\000\042\003\uffcb\007\uffcb\012\uffcb\017\uffcb\020\uffcb"
			+ "\024\uffcb\025\uffcb\027\uffcb\041\uffcb\045\uffcb\050\uffcb\051"
			+ "\uffcb\052\uffcb\053\uffcb\054\uffcb\056\uffcb\001\002\000\042"
			+ "\003\uffca\007\uffca\012\uffca\017\uffca\020\uffca\024\uffca\025"
			+ "\uffca\027\uffca\041\uffca\045\uffca\050\uffca\051\uffca\052\uffca"
			+ "\053\uffca\054\uffca\056\uffca\001\002\000\004\055\214\001"
			+ "\002\000\004\050\215\001\002\000\036\007\056\012\065"
			+ "\017\051\020\061\024\052\025\057\027\062\041\064\045"
			+ "\066\050\050\052\054\053\053\054\055\056\060\001\002"
			+ "\000\026\030\074\032\072\033\076\034\070\035\071\036"
			+ "\073\037\101\040\075\047\100\051\217\001\002\000\004"
			+ "\043\ufff2\001\002\000\004\043\221\001\002\000\010\002"
			+ "\ufff9\003\ufff9\004\ufff9\001\002\000\010\003\ufff6\051\ufff6"
			+ "\056\ufff6\001\002\000\010\003\ufff5\051\ufff5\056\ufff5\001"
			+ "\002\000\004\051\225\001\002\000\004\043\226\001\002"
			+ "\000\010\002\ufffa\003\ufffa\004\ufffa\001\002\000\010\002"
			+ "\ufffd\003\ufffd\004\ufffd\001\002\000\004\002\000\001\002"
			+ "\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\010\002"
			+ "\ufffc\003\ufffc\004\ufffc\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\230\000\010\003\004\004\003\005\006\001\001\000"
			+ "\004\005\231\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\010\006\021\007\223\010\016\001\001\000\002\001\001"
			+ "\000\002\001\001\000\010\006\021\007\017\010\016\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\011\026\001\001\000\004\010\023\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\006\012"
			+ "\031\013\034\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\013\043\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\015\045\001\001\000\002\001\001\000\004\014\062"
			+ "\001\001\000\006\014\201\017\202\001\001\000\004\014"
			+ "\174\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\014\165\001\001\000"
			+ "\004\014\164\001\001\000\004\020\161\001\001\000\004"
			+ "\014\145\001\001\000\004\014\144\001\001\000\002\001"
			+ "\001\000\004\014\143\001\001\000\004\016\126\001\001"
			+ "\000\004\014\066\001\001\000\002\001\001\000\004\014"
			+ "\124\001\001\000\004\014\123\001\001\000\004\014\122"
			+ "\001\001\000\004\014\121\001\001\000\004\014\120\001"
			+ "\001\000\002\001\001\000\004\014\115\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\014\101\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\020\105\001\001\000\002\001\001\000\006\014\111\021"
			+ "\110\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\014\114\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\020\117\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\015\132\001\001\000\002\001\001\000\004"
			+ "\016\136\001\001\000\004\014\135\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\016\142\001\001\000\004"
			+ "\014\141\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\006"
			+ "\022\150\023\151\001\001\000\002\001\001\000\004\023"
			+ "\153\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\014"
			+ "\157\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\014\163\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\014\167\001\001"
			+ "\000\002\001\001\000\004\014\171\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\014\176\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\014\204"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\014\215\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$CoolParserSolution$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$CoolParserSolution$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$CoolParserSolution$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	int omerrs = 0;

	public void syntax_error(Symbol cur_token) {
		int lineno = action_obj.curr_lineno();
		String filename = action_obj.curr_filename().getString();
		System.err.print("\"" + filename + "\", line " + lineno
				+ ": parse error at or near ");
		Utilities.printToken(cur_token);
		omerrs++;
		if (omerrs > 50) {
			System.err.println("More than 50 errors");
			System.exit(1);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$CoolParserSolution$actions {

	int curr_lineno() {
		return ((CoolTokenLexer) parser.getScanner()).curr_lineno();
	}

	AbstractSymbol curr_filename() {
		return ((CoolTokenLexer) parser.getScanner()).curr_filename();
	}

	private final CoolParserSolution parser;

	/** Constructor */
	CUP$CoolParserSolution$actions(CoolParserSolution parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$CoolParserSolution$do_action(
			int CUP$CoolParserSolution$act_num,
			java_cup.runtime.lr_parser CUP$CoolParserSolution$parser,
			java.util.Stack CUP$CoolParserSolution$stack, int CUP$CoolParserSolution$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$CoolParserSolution$result;

		/* select the action based on the action number */
		switch (CUP$CoolParserSolution$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // simple_case ::= OBJECTID COLON TYPEID DARROW expr SEMI
		{
			Branch RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new Branch(curr_lineno(), n, t, e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					17/* simple_case */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // case_list ::= case_list simple_case
		{
			ListNode<Branch> RESULT = null;
			ListNode<Branch> cl = (ListNode<Branch>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			Branch c = (Branch) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = cl.appendElement(c);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					16/* case_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // case_list ::= simple_case
		{
			ListNode<Branch> RESULT = null;
			Branch c = (Branch) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = (new ListNode<Branch>(curr_lineno())).appendElement(c);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					16/* case_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // exp_list ::= exp_list COMMA expr
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> el = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = el.appendElement(e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					15/* exp_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // exp_list ::= expr
		{
			ListNode<AbstractExpression> RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = (new ListNode<AbstractExpression>(curr_lineno())).appendElement(e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					15/* exp_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // actuals ::= LPAREN exp_list RPAREN
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> el = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = el;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					14/* actuals */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // actuals ::= LPAREN RPAREN
		{
			ListNode<AbstractExpression> RESULT = null;
			RESULT = new ListNode<AbstractExpression>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					14/* actuals */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // stmt_list ::= stmt_list error SEMI
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> sl = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			RESULT = sl;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					13/* stmt_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // stmt_list ::= stmt_list expr SEMI
		{
			ListNode<AbstractExpression> RESULT = null;
			ListNode<AbstractExpression> sl = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = sl.appendElement(e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					13/* stmt_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // stmt_list ::= error SEMI
		{
			ListNode<AbstractExpression> RESULT = null;
			RESULT = new ListNode<AbstractExpression>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					13/* stmt_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // stmt_list ::= expr SEMI
		{
			ListNode<AbstractExpression> RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = (new ListNode<AbstractExpression>(curr_lineno())).appendElement(e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					13/* stmt_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // expr ::= OBJECTID actuals
		{
			AbstractExpression RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			ListNode<AbstractExpression> a = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Dispatch(curr_lineno(), new Object_(curr_lineno(),
					AbstractTable.idtable.addString("self")), n, a);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // expr ::= OBJECTID
		{
			AbstractExpression RESULT = null;
			AbstractSymbol o = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Object_(curr_lineno(), o);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // expr ::= BOOL_CONST
		{
			AbstractExpression RESULT = null;
			Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new BoolConstant(curr_lineno(), b);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // expr ::= STR_CONST
		{
			AbstractExpression RESULT = null;
			AbstractSymbol s = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new StringConstant(curr_lineno(), s);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // expr ::= INT_CONST
		{
			AbstractExpression RESULT = null;
			AbstractSymbol i = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new IntegerConstant(curr_lineno(), i);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // expr ::= LPAREN expr RPAREN
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = e;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // expr ::= NOT expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Complement(curr_lineno(), e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // expr ::= expr LE expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Leq(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // expr ::= expr EQ expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Eq(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // expr ::= expr LT expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Lt(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // expr ::= NEG expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Negate(curr_lineno(), e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // expr ::= expr DIV expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Divide(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // expr ::= expr MULT expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Mul(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // expr ::= expr MINUS expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Sub(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // expr ::= expr PLUS expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e1 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e2 = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Plus(curr_lineno(), e1, e2);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // expr ::= ISVOID expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new IsVoid(curr_lineno(), e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // expr ::= NEW TYPEID
		{
			AbstractExpression RESULT = null;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new New_(curr_lineno(), t);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // expr ::= CASE expr OF case_list ESAC
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			ListNode<Branch> cl = (ListNode<Branch>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new CaseExpression(curr_lineno(), e, cl);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // expr ::= LET let_list
		{
			AbstractExpression RESULT = null;
			AbstractExpression ll = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = ll;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // expr ::= LBRACE stmt_list RBRACE
		{
			AbstractExpression RESULT = null;
			ListNode<AbstractExpression> sl = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new Block(curr_lineno(), sl);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // expr ::= WHILE expr LOOP expr POOL
		{
			AbstractExpression RESULT = null;
			AbstractExpression p = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression b = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new Loop(curr_lineno(), p, b);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // expr ::= IF expr THEN expr ELSE expr FI
		{
			AbstractExpression RESULT = null;
			AbstractExpression p = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractExpression t = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new Conditional(curr_lineno(), p, t, e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // expr ::= expr DOT OBJECTID actuals
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			ListNode<AbstractExpression> a = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Dispatch(curr_lineno(), e, n, a);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // expr ::= expr AT TYPEID DOT OBJECTID actuals
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			ListNode<AbstractExpression> a = (ListNode<AbstractExpression>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new StaticDispatch(curr_lineno(), e, t, n, a);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // expr ::= OBJECTID ASSIGN expr
		{
			AbstractExpression RESULT = null;
			AbstractSymbol v = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Assign(curr_lineno(), v, e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(10/* expr */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // let_list ::= error COMMA let_list
		{
			AbstractExpression RESULT = null;
			AbstractExpression ll = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = ll;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					12/* let_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // let_list ::= OBJECTID COLON TYPEID
			// optional_initialization COMMA let_list
		{
			AbstractExpression RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression i = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression ll = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Let(curr_lineno(), n, t, i, ll);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					12/* let_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // let_list ::= error IN expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = e;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					12/* let_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // let_list ::= OBJECTID COLON TYPEID
			// optional_initialization IN expr
		{
			AbstractExpression RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression i = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Let(curr_lineno(), n, t, i, e);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					12/* let_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // formal ::= OBJECTID COLON TYPEID
		{
			Formal RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Formal(curr_lineno(), n, t);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(9/* formal */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // formal_list ::= formal_list COMMA formal
		{
			ListNode<Formal> RESULT = null;
			ListNode<Formal> fl = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			Formal f = (Formal) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = fl.appendElement(f);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					8/* formal_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // formal_list ::= formal
		{
			ListNode<Formal> RESULT = null;
			Formal f = (Formal) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = (new ListNode<Formal>(curr_lineno())).appendElement(f);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					8/* formal_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // ListNode<Formal> ::= LPAREN error RPAREN
		{
			ListNode<Formal> RESULT = null;
			RESULT = new ListNode<Formal>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					7/* ListNode<Formal> */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // ListNode<Formal> ::= LPAREN formal_list RPAREN
		{
			ListNode<Formal> RESULT = null;
			ListNode<Formal> fl = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = fl;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					7/* ListNode<Formal> */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // ListNode<Formal> ::= LPAREN RPAREN
		{
			ListNode<Formal> RESULT = null;
			RESULT = new ListNode<Formal>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					7/* ListNode<Formal> */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // optional_initialization ::= ASSIGN expr
		{
			AbstractExpression RESULT = null;
			AbstractExpression e = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = e;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					11/* optional_initialization */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // optional_initialization ::=
		{
			AbstractExpression RESULT = null;
			RESULT = new NoExpression(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					11/* optional_initialization */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // feature ::= OBJECTID COLON TYPEID optional_initialization
		{
			AbstractFeature RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			AbstractExpression i = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Attribute(curr_lineno(), n, t, i);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					6/* feature */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // feature ::= OBJECTID ListNode<Formal> COLON TYPEID LBRACE expr
			// RBRACE
		{
			AbstractFeature RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 6)).value;
			ListNode<Formal> f = (ListNode<Formal>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 5)).value;
			AbstractSymbol t = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 3)).value;
			AbstractExpression b = (AbstractExpression) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = new Method(curr_lineno(), n, f, t, b);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					6/* feature */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // feature_list ::= feature_list error SEMI
		{
			ListNode<AbstractFeature> RESULT = null;
			ListNode<AbstractFeature> fl = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			RESULT = fl;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // feature_list ::= feature_list feature SEMI
		{
			ListNode<AbstractFeature> RESULT = null;
			ListNode<AbstractFeature> fl = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			AbstractFeature f = (AbstractFeature) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = fl.appendElement(f);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // feature_list ::= error SEMI
		{
			ListNode<AbstractFeature> RESULT = null;
			RESULT = new ListNode<AbstractFeature>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // feature_list ::= feature SEMI
		{
			ListNode<AbstractFeature> RESULT = null;
			AbstractFeature f = (AbstractFeature) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = (new ListNode<AbstractFeature>(curr_lineno())).appendElement(f);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					4/* feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // optional_feature_list ::= feature_list
		{
			ListNode<AbstractFeature> RESULT = null;
			ListNode<AbstractFeature> fl = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = fl;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					5/* optional_feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // optional_feature_list ::=
		{
			ListNode<AbstractFeature> RESULT = null;
			RESULT = new ListNode<AbstractFeature>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					5/* optional_feature_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE
			// optional_feature_list RBRACE SEMI
		{
			Class_ RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 6)).value;
			AbstractSymbol p = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 4)).value;
			ListNode<AbstractFeature> f = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			RESULT = new Class_(curr_lineno(), n, p, f, curr_filename());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(3/* class */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // class ::= CLASS TYPEID LBRACE optional_feature_list RBRACE
			// SEMI
		{
			Class_ RESULT = null;
			AbstractSymbol n = (AbstractSymbol) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 4)).value;
			ListNode<AbstractFeature> f = (ListNode<AbstractFeature>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 2)).value;
			RESULT = new Class_(curr_lineno(), n, AbstractTable.idtable
					.addString("Object"), f, curr_filename());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(3/* class */,
					RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // class_list ::= class_list error
		{
			ListNode<Class_> RESULT = null;
			ListNode<Class_> cl = (ListNode<Class_>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = cl;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // class_list ::= class_list class
		{
			ListNode<Class_> RESULT = null;
			ListNode<Class_> cl = (ListNode<Class_>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			Class_ c = (Class_) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = cl.appendElement(c);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // class_list ::= error SEMI
		{
			ListNode<Class_> RESULT = null;
			RESULT = new ListNode<Class_>(curr_lineno());
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // class_list ::= class
		{
			ListNode<Class_> RESULT = null;
			Class_ c = (Class_) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = (new ListNode<Class_>(curr_lineno())).appendElement(c);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					2/* class_list */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // program ::= error
		{
			Program RESULT = null;
			RESULT = new Program(curr_lineno(), new ListNode<Class_>(curr_lineno()));
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					1/* program */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= program EOF
		{
			Object RESULT = null;
			Program start_val = (Program) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 1)).value;
			RESULT = start_val;
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(0/* $START */,
					RESULT);
		}
			/* ACCEPT */
			CUP$CoolParserSolution$parser.done_parsing();
			return CUP$CoolParserSolution$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // program ::= class_list
		{
			Program RESULT = null;
			ListNode<Class_> cl = (ListNode<Class_>) ((java_cup.runtime.Symbol) CUP$CoolParserSolution$stack
					.elementAt(CUP$CoolParserSolution$top - 0)).value;
			RESULT = new Program(curr_lineno(), cl);
			CUP$CoolParserSolution$result = new java_cup.runtime.Symbol(
					1/* program */, RESULT);
		}
			return CUP$CoolParserSolution$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
